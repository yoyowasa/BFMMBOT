# configs/base.yml：共通の土台設定（paper/live/backtest から上書きする前提）
# 役割：
# - 戦略しきい値（features.*）と、ガード/リスク/窓/ログをひとまとめにする
# - 自炊ワークフローの整合・安全装置・窓切替がこの数字を読む

env: paper  # 既定は paper（各環境ファイルで上書き）  # 文書準拠
product_code: FX_BTC_JPY  # 対象銘柄は固定（CFD/FX_BTC_JPY）
tick_size: 1  # 価格刻み（1 tick = 1 JPY）

size:  # 取引サイズの下限と既定値
  min: 0.001     # 最小ロット
  default: 0.01  # 既定ロット（最初は小さく）

risk:  # リスク上限と非常停止（Kill-Switch）
  max_inventory: 0.05  # 在庫の絶対上限（BTC）
  inventory_eps: 0.002  # 上限の手前に置く安全マージン（単位=ベース通貨）。この分だけ手前で新規をブロックする
  kill:
    daily_pnl_jpy: -30000  # 日次損益がこの値を下回ったら停止
    max_dd_jpy: -20000     # ドローダウンがこの値を下回ったら停止

guard:  # ガードレール（相場が速すぎる時は出さない）
  max_mid_move_bp_30s: 25
  feed_health:  # WS/Heartbeat鮮度ガード
    age_ms:
      caution: 3000
      halted: 10000
    heartbeat_gap_sec:
      caution: 3
      halted: 10
    recover_ok_consecutive: 2
    cooldown_sec: 10
  caution:
    max_order_size: 0.003
    max_order_rate_per_sec: 2
  # 直近30sのミッド変化が25bp超なら停止/縮小

mode_switch:  # “窓”の扱い。メンテ時間/ファンディング計算時刻の前後で挙動変更
  maintenance: { start: "04:00:00", end: "04:10:00", action: "pause" }  # JSTの例
  funding_calc_jst: ["06:00:00","14:00:00","22:00:00"]  # 計算タイミング（受渡は遅延）
  funding_transfer_lag_hours: 8  # 授受のラグ時間（時間）

latency:  # まずは固定遅延のモデル（実測に置換予定）
  rx_ms: 20  # 受信遅延の仮定
  tx_ms: 20  # 送信遅延の仮定

health:
  stale_sec_warn: 3      # 何をする行か：Bestが3秒無更新なら Caution（新規を絞る/停止準備）
  stale_sec_halt: 10     # 何をする行か：Bestが10秒無更新なら Halted（新規NG・決済のみ許可）

features:  # 戦略のしきい値（#1/#2 の主材料）
  stall_T_ms: 240          # #1 静止→一撃：BestがTms静止
  ca_ratio_win_ms: 600     # #2 C/Aゲート：集計窓（ms）
  ca_threshold: 1.25       # #2 C/Aゲート：Cancel/Add 閾値（以下ならOK）
  min_spread_tick: 1       # 最低スプレッド（tick）
  ttl_ms: 900              # オーダーの寿命（ms）
  stall_ttl_ms: 650        # STだけ寿命を短く（初動の一拍を狙って長居しない）
  age_ms: 200              # Age×MP（OFF時も計算は可能）
  mp_offset_tick: 1.0      # Micropriceオフセット（tick）
  tiny_prints_N: 20        # Tiny-Prints集計N（OFFの初期値）
  tiny_prints_minCount: 14 # Tiny-Prints発火閾値（OFFの初期値）
  eta_t_window_ms: 800     # Queue ETAの窓（OFFの初期値）
  # 在庫帯ブロック（#2 Cancel/Add Gate の安全装置）
  ca_gate_block_min_abs_inv: 0.04  # C/Aゲートを止め始める在庫の下限|Q|（この帯だけ止める）
  ca_gate_block_max_abs_inv: 0.06  # C/Aゲートを再開する在庫の上限|Q|
  # stall_then_strike:        # 何をする設定か：#1 静止→一撃 のしきい値を戦略専用でまとめる
  #   stall_T_ms: 250         # 何をする設定か：Bestがこのms静止していたら両面エントリー可
  #   min_spread_tick: 1      # 何をする設定か：最低スプレッド（tick）。これ未満なら何もしない
  #   ttl_ms: 800             # 何をする設定か：置いた注文の寿命（ms）

  # cancel_add_gate:          # 何をする設定か：#2 キャンセル比ゲートのしきい値セット
  #   ca_ratio_win_ms: 500    # 何をする設定か：Cancel/Add 比を測る時間窓（ms）
  #   ca_threshold: 1.3       # 何をする設定か：C/A比がこの値以下のときだけエントリー可
  #   min_spread_tick: 1      # 何をする設定か：最低スプレッド（tick）
  #   ttl_ms: 800             # 何をする設定か：置いた注文の寿命（ms）

  # age_microprice:           # 何をする設定か：#3（OFF想定）Age×MP 用の外だし（後日ONに備えて整理）
  #   age_ms: 200             # 何をする設定か：Bestの滞留時間（ms）
  #   mp_offset_tick: 1.0     # 何をする設定か：Micropriceの寄せ量（tick）

  # tiny_prints_filter:       # 何をする設定か：#5（OFF想定）Tiny-Prints の発火しきい値
  #   tiny_prints_N: 20       # 何をする設定か：集計に使う件数N
  #   tiny_prints_minCount: 14　# 何をする設定か：P20以下がこの回数以上で有効

  # queue_eta_gate:           # 何をする設定か：#6（OFF想定）Queue ETA の観測窓
  #   eta_t_window_ms: 800    # 何をする設定か：ETAの時間窓（ms）
  zero_reopen_pop:  # 何をする設定か：ゼロ→再拡大の“一拍だけ”出す戦略のパラメータ
    min_take_qty: 0.0           # 何をする設定か：利確IOCが当たる相手側Bestの最小数量（0で無効・例 0.01 などに設定）
    max_join_qty: 0.0           # 何をする設定か：自分が並ぶ側Bestの数量がこの値を超えたら見送り（0で無効・例 0.05 など）
    exact_one_tick_only: true    # 何をする設定か：スプレッドが“1tickちょうど”の時だけ出す（+1tick利確が即時一致）
    ttl_jitter_ms: 80          # 何をする設定か：TTLに与える±ゆらぎ幅(ms)。同時剥がれの衝突を避ける
    min_best_age_ms: 200        # 何をする設定か：Bestがこの時間（ms）以上変わらず“落ち着いて”いたら発注を許可
    reopen_stable_ms: 50        # 何をする設定か：再拡大がこの時間（ms）続いたら発注を許可（瞬間ノイズはスルー）
    loss_cooloff_ms: 1500      # 何をする設定か：非常口フラット後に“お休み”する時間ms（連続被弾を防ぐ）
    fee_maker_bp: 0.0        # 何をする設定か：メーカー手数料（bp）。例：-2.0 は -0.02% のリベート、+2.0 は +0.02% の費用
    fee_taker_bp: 0.0        # 何をする設定か：テイカー手数料（bp）。例：10.0 は 0.10%
    edge_bp_min: 0.0         # 何をする設定か：手数料控除後に最低これだけ余裕(bps)がないと発注しない（まずは0.0で様子見）
    max_speed_ticks_per_s: 12.0     # 何をする設定か：midの速さ（tick/秒）がこの上限を超えたら発注しない
    min_spread_tick: 1         # 何をする設定か：再拡大の下限tick（1以上で発注可）
    max_spread_tick: 2         # 何をする設定か：再拡大が広すぎるときは出さない上限tick
    ttl_ms: 800                # 何をする設定か：指値の寿命ms（置きっぱなし防止）
    stop_adverse_ticks: 2       # 何をする設定か：エントリーVWAPから不利にこのtick以上動いたら即フラットIOCで逃げる
    entries_window_ms: 10000    # 何をする設定か：この時間窓(ms)内のエントリー回数を数える
    max_entries_in_window: 6     # 何をする設定か：時間窓内に許可する最大エントリー回数
    size_min: 0.001            # 何をする設定か：最小ロット（取引所の最小単位に合わせる）
    cooloff_ms: 250            # 何をする設定か：連打を防ぐ冷却時間ms
    seen_zero_window_ms: 1000  # 何をする設定か：ゼロを“直後”とみなす時間窓ms

# 何をする設定か：起動時にデフォルトでONにする戦略のリスト（※CLIの --strategy があればそちら優先）
strategies:
  - stall_then_strike      # #1 静止→一撃：最良気配が一定時間止まった直後だけ両面で薄く回す（常用・有効）
  - cancel_add_gate        # #2 C/Aゲート：Best層のCancel/Add比が低いときだけ出す“毒性ゲート”（常用・有効）
  # - age_microprice       # #3 Age×Microprice：Best滞留×MP寄りでリーン（試験用・普段はOFF）
  # - gap_edge_refill      # #4 ギャップ縁補充：Top数層の2tick空きを縁で拾う（試験用・普段はOFF）
  # - tiny_prints_filter   # #5 小口連発フィルタ：小口偏り時だけ両面薄く（試験用・普段はOFF）
  # - queue_eta_gate       # #6 Queue ETAゲート：自分の順番ETAが短いときだけ置く（試験用・普段はOFF）
  # - zero_reopen_pop      # #7 0→再拡大ポップ：スプレッド0の直後、再拡大の1拍を取る（試験用・普段はOFF）

logging:  # ログ出力の基本設定
  level: DEBUG     # paperデフォルトは詳細ログ
  rotate_mb: 128  # ログローテーションの閾値（MB）
  run_log_template: logs/runtime/run.log  # 何をする設定か：共通run.logの出力先テンプレート
  strategy_log_template: null  # 何をする設定か：戦略専用ログのテンプレート（nullで無効）
  strategy_level: null  # 何をする設定か：戦略専用ログのレベル（nullならlevelを流用）
strategy_cfg:
  stall_then_strike:
    size:
      default: 0.003
  cancel_add_gate:
    size:
      default: 0.007
env_overrides:
  live:
    env: live
    size:
      default: 0.001
    risk:
      max_inventory: 0.1
    guard:
      max_mid_move_bp_30s: 10
    logging:
      level: INFO

